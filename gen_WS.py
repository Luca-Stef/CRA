# Boilerplate code generated by OVITO Pro 3.7.7
from ovito.io import *
from ovito.modifiers import *
from ovito.data import *
from ovito.pipeline import *
from ovito.vis import *
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import sys
import os

stress = float(sys.argv[1])
repeat = int(sys.argv[2])
local_folder = "CRA/"
input_file = f"{stress}/{repeat}/"
os.system(f"mkdir -p CRA/{stress}/{repeat}/images")
os.system(f"gzip -f CRA/{stress}/{repeat}/*.lmp")
step = np.r_[np.linspace(1, 10, 10), np.linspace(20, 1000, 99), np.linspace(1050, 3000, 40)].astype(int)

# Data import:
pipeline = import_file(local_folder + input_file + 'Fe_perfect_L80_relax_*steps.lmp.gz', atom_style = 'atomic')
pipeline.add_to_scene()
defect_counts = np.zeros([pipeline.source.num_frames,2])
steps = np.zeros(pipeline.source.num_frames)

# Wigner-Seitz defect analysis:
mod = WignerSeitzAnalysisModifier()
mod.per_type_occupancies = True
mod.reference = FileSource()
mod.affine_mapping = ReferenceConfigurationModifier.AffineMapping.ToReference
pipeline.modifiers.append(mod)
mod.reference.load(local_folder + input_file + 'Fe_perfect_L80_cg1.lmp.gz', atom_style = 'atomic')

# Vacancies 0 and interstitials 1
for defect_type in [0, 1]:
    # Expression selection:                                            interstitial                           vacancy
    pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'Occupancy < 2' if defect_type else 'Occupancy > 0'))
        
    # Delete selected:
    pipeline.modifiers.append(DeleteSelectedModifier())
    
    if defect_type:
        # Coordination analysis
        pipeline.modifiers.append(CoordinationAnalysisModifier())
        
        # Expression selection:
        pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'Coordination == 0'))
        
        # Invert selection:
        pipeline.modifiers.append(InvertSelectionModifier())
        
        # Delete selected:
        pipeline.modifiers.append(DeleteSelectedModifier())  
        
        # Assign color:
        pipeline.modifiers.append(AssignColorModifier(color = [0.0, 0.0, 1.0]))
    
    # Viewport setup:
    vp = Viewport(
        type = Viewport.Type.Perspective, 
        fov = 0.610865238198, 
        camera_dir = (0.6427958114101555, 0.5490952630482845, -0.5341422440993552),
        camera_pos = (-300.73062595217795, -240.24237350020252, 459.0030795486278))
    overlay = TextLabelOverlay(font_size=0.04, text="", text_color=(0.0, 0.0, 0.0))
    vp.overlays.append(overlay)
    
    # Rendering:
    for frame in range(pipeline.source.num_frames):
        
        data = pipeline.compute(frame)
        steps[frame] = step[frame]
        defect_counts[frame, defect_type] = data.particles.count
        defect_type_str = {0: 'vacancies', 1: 'interstitials'}[defect_type]
        
        for i in [1,2]:
            axis = {1:'y', 2:'z'}[i]
            fig = plt.figure()
            (counts, bins) = np.histogram(data.particles.positions[...][:,i], bins=20) 
            n, bins, patches = plt.hist(bins[:-1], bins, weights=counts*20/data.cell.volume)
            plt.xlabel(f"{axis}")
            plt.ylabel("Concentration m^-2")
            plt.title(f"Concentration of {defect_type_str} as a function of {axis} position")
            plt.savefig(local_folder + input_file + f"images/{defect_type_str}{step[frame]}{axis}.png")
            plt.close()
        
        overlay.text = f"{defect_type_str} at {step[frame]/1000} DPA"
        vp.render_image(filename=local_folder + input_file + f'images/Fe_perfect_L80_relax_{step[frame]}steps_{defect_type_str}.png',
                         size=(600, 600), frame=frame, background=(0.0, 0.0, 0.0), renderer=TachyonRenderer(), alpha=True)

        """if defect_type: 
            pipeline.modifiers[4].expression == "Coordination > 0"
            data = pipeline.compute(frame)
            overlay.text = f"extra planes at {step[frame]/1000} DPA"
            vp.render_image(filename=local_folder + input_file + f'images/Fe_perfect_L80_relax_{step[frame]}steps_planes.png',
                         size=(600, 600), frame=frame, background=(0.0, 0.0, 0.0), renderer=TachyonRenderer(), alpha=True)"""
        
    for i in range(2): del pipeline.modifiers[1]

np.savetxt(f"CRA/{stress}/{repeat}/Fe_perfect_L80_defects.dat", np.c_[step, defect_counts])

fig = plt.figure()
plt.plot(steps/1000, 100*defect_counts[:, 0]/1024000, 'bo', label="vacancies")
plt.plot(steps/1000, 100*defect_counts[:, 1]/1024000, 'go', label="interstitials")
plt.legend()
plt.xlabel("DPA")
plt.ylabel("percentage content")
plt.title("Vacancies and interstitial percentage content as a function of dpa")
plt.savefig(local_folder + input_file + f"images/Fe_perfect_L80_defects.png")
plt.close()
print(f"Wigner-Seitz for {stress} bar repeat {repeat} done")

