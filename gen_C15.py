# Boilerplate code generated by OVITO Pro 3.7.7
from ovito.io import *
from ovito.modifiers import *
from ovito.data import *
from ovito.pipeline import *
from ovito.vis import *
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import numpy as np
import sys

step = np.r_[np.linspace(1, 10, 10), np.linspace(20, 1000, 99), np.linspace(1050, 3000, 40)].astype(int)
stress = float(sys.argv[1])
repeat = int(sys.argv[2])
local_folder = "CRA/"
input_file = f"{stress}/{repeat}/"
size_count = np.array([])
dpa_count = np.array([])
vol_frac = []

# Data import:
pipeline = import_file(f'CRA/{stress}/{repeat}/Fe_perfect_L80_relax_*steps.lmp.gz', atom_style = 'atomic')

# Visual element initialization:
data = pipeline.compute() # Evaluate new pipeline to gain access to visual elements associated with the imported data objects.
data.particles.vis.radius = 1.5
#del data # Done accessing input DataCollection of pipeline.
pipeline.add_to_scene()

# Voronoi analysis:
pipeline.modifiers.append(VoronoiAnalysisModifier(compute_indices = True))

# Common neighbor analysis:
pipeline.modifiers.append(CommonNeighborAnalysisModifier())

# Polyhedral template matching:
mod = PolyhedralTemplateMatchingModifier()
mod.rmsd_cutoff = 0.15
mod.output_rmsd = True
mod.output_interatomic_distance = True
mod.output_orientation = True
mod.output_deformation_gradient = True
mod.output_ordering = True
mod.structures[PolyhedralTemplateMatchingModifier.Type.ICO].enabled = True
mod.structures[PolyhedralTemplateMatchingModifier.Type.SC].enabled = True
mod.structures[PolyhedralTemplateMatchingModifier.Type.CUBIC_DIAMOND].enabled = True
mod.structures[PolyhedralTemplateMatchingModifier.Type.HEX_DIAMOND].enabled = True
mod.structures[PolyhedralTemplateMatchingModifier.Type.GRAPHENE].enabled = True
pipeline.modifiers.append(mod)

# Expression selection:
pipeline.modifiers.append(ExpressionSelectionModifier(expression = 'StructureType == 4'))

# Invert selection:
pipeline.modifiers.append(InvertSelectionModifier())

# Delete selected:
pipeline.modifiers.append(DeleteSelectedModifier())

# Cluster analysis:
pipeline.modifiers.append(ClusterAnalysisModifier())

# Viewport setup:
vp = Viewport(
    type = Viewport.Type.Perspective, 
    fov = 0.610865238198, 
    camera_dir = (0.6427958114101555, 0.5490952630482845, -0.5341422440993552), 
    camera_pos = (-300.73062595217795, -240.24237350020252, 459.0030795486278))
overlay = TextLabelOverlay(font_size=0.04, text="", text_color=(0.0, 0.0, 0.0))
vp.overlays.append(overlay)

# Rendering:
for frame in range(pipeline.source.num_frames):
    
    data = pipeline.compute(frame)
    cluster_size = np.array(data.tables["clusters"]["Cluster Size"])
    size_count = np.r_[size_count, cluster_size]
    dpa_count = np.r_[dpa_count, step[frame]*np.ones(cluster_size.shape[0])/1000]
    vol_frac_frame = np.array([float(data.particles["Atomic Volume"][...][data.particles["Cluster"][...]==i].sum())/data.cell.volume for i in range(cluster_size.shape[0])])
    vol_frac.append(vol_frac_frame)
    overlay.text = f"laves phases at {step[frame]/1000} DPA"
    vp.render_image(filename=local_folder + input_file + f'images/Fe_perfect_L80_relax_{step[frame]}steps_C15.png', 
                    size=(600, 600), frame=frame, background=(0.0, 0.0, 0.0), renderer=TachyonRenderer(), alpha=True)

max_shape = max([vol_frac[i].shape for i in range(len(vol_frac))])[0]
[vol_frac[i].resize(max_shape, refcheck=False) for i in range(len(vol_frac))]
vol_frac = np.array(vol_frac)

fig = plt.figure()
plt.plot(step/1000, vol_frac.sum(axis=1))
plt.xlabel("DPA")
plt.ylabel("Volume concentration (%)")
plt.grid()
plt.savefig(f"CRA/{stress}/{repeat}/images/C15vol.png")
np.savetxt(f"CRA/{stress}/{repeat}/C15vol.dat", vol_frac.sum(axis=1))
plt.close()

fig = plt.figure()
hist, xedges, yedges, im = plt.hist2d(dpa_count, size_count, bins=[np.r_[step, 3050]/1000, [i for i in range(1, int(size_count.max()) + 2)]], cmin=1)
plt.xscale("log")
plt.inferno()
plt.colorbar()
plt.xlabel("DPA")
plt.ylabel("C15 size")
plt.savefig(f"CRA/{stress}/{repeat}/images/C15.png")
np.savetxt(f"CRA/{stress}/{repeat}/C15hist.dat", hist)
np.savetxt(f"CRA/{stress}/{repeat}/xedges.dat", xedges)
np.savetxt(f"CRA/{stress}/{repeat}/yedges.dat", yedges)
plt.close()

print(f"Laves Phase analysis done for {stress} bar repeat {repeat}")