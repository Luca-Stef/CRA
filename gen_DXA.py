# Boilerplate code generated by OVITO Pro 3.5.2
from ovito.io import *
from ovito.modifiers import *
from ovito.pipeline import *
from ovito.vis import *
import math
import numpy as np
import sys
import os


#initial_grains = input("number of initial grains:")
#box_size = input("box size:")
#initial_grains = int(sys.argv[1])
#box_size = int(sys.argv[2])
stress = float(sys.argv[1])
repeat = int(sys.argv[2])
#initial_grains = 30
#box_size = 80
step = np.r_[np.linspace(1, 10, 10), np.linspace(20, 1000, 99), np.linspace(1050, 3000, 40)].astype(int)

local_folder = "CRA/"
input_file = f"{stress}/{repeat}/"
os.system(f"mkdir -p CRA/{stress}/{repeat}/images")
os.system(f"gzip -f CRA/{stress}/{repeat}/*.lmp")

# Data import:
pipeline = import_file(local_folder + input_file + 'Fe_perfect_L80_relax_*steps.lmp.gz', atom_style = 'atomic')

pipeline.add_to_scene()

# Configuring visual elements associated with imported dataset:
pipeline.compute().cell.vis.rendering_color = (0.0, 0.0, 0.0) #(1.0, 1.0, 1.0)
pipeline.compute().particles.vis.enabled = False

# Dislocation analysis (DXA):
mod = DislocationAnalysisModifier()
mod.input_crystal_structure = DislocationAnalysisModifier.Lattice.BCC
mod.defect_vis.enabled = False
pipeline.modifiers.append(mod)

DPA = np.zeros(5000)
f1 = open(local_folder + input_file + "Fe_perfect_L80_pe_vol_box.dat", "r")
for i, line in enumerate(f1):
    x = line.split()
    DPA[i] = float(x[2])
f1.close()


f2 = open(local_folder + input_file + "Fe_perfect_L80_DXA.dat", "w")
f2.write("DPA Total 111 100 110 other\n")

# Viewport setup:
vp = Viewport(
    type = Viewport.Type.Perspective, 
    fov = 0.6108652381980153, 
    camera_dir = (-0.49923017660270624, 0.665640235470275, -0.5547001962252291), 
    camera_pos = (474.06364094443506, -356.2571127345123, 493.6616215197488))
overlay = TextLabelOverlay(font_size=0.04, text="", text_color=(0.0, 0.0, 0.0))
vp.overlays.append(overlay)

# Renderer setup:
renderer = TachyonRenderer()

# Rendering:
for frame in range(pipeline.source.num_frames):
    
    data = pipeline.compute(frame)
    
    overlay.text = f"dislocations at {step[frame]/1000} DPA"
    vp.render_image(filename=local_folder + input_file + f'images/Fe_perfect_L80_relax_{step[frame]}steps_DXA.png', 
                    size=(600, 600), frame=frame, background=(0.0, 0.0, 0.0), renderer=renderer, alpha=True)
    
    Total_length = data.attributes["DislocationAnalysis.total_line_length"]
    d111_length = data.attributes["DislocationAnalysis.length.1/2<111>"]
    d100_length = data.attributes["DislocationAnalysis.length.<100>"]
    d110_length = data.attributes["DislocationAnalysis.length.<110>"]
    other_length = data.attributes["DislocationAnalysis.length.other"]
    cell_volume = data.attributes['DislocationAnalysis.cell_volume']

    Total_length /= cell_volume
    d111_length /= cell_volume
    d100_length /= cell_volume
    d110_length /= cell_volume
    other_length /= cell_volume

    f2.write(f"{DPA[step[frame]]} {Total_length} {d111_length} {d100_length} {d110_length} {other_length} \n")
    
f2.close()
print(f"Dislocation analysis done for {stress} bar repeat {repeat}")
